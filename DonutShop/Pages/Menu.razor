@page "/menu"
@using DonutShop.Models
@layout MainLayout 
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@using DonutShop.Services
@using System.Text.Json
@inject OrderState OrderState
@inject IJSRuntime JavaScript


<div class="main">

    <ul class="donut-cards">
        @if(donutSpecial !=null)
        {
            @foreach (var special in donutSpecial )
            {
                <li @onclick="@(() => OrderState.ShowCustomizededDonutDialog(special))" style="background-image: url('@special.ImageUrl')">
                    <div class="donut-info">
                        <span class="title">@special.Name</span>
                        @special.Description
                        <span class="price">@special.GetFormattedBasePrice()</span>
                        <button class="btnOrder" @onclick="@(() => OrderState.ShowCustomizededDonutDialog(special))"> I want it!</button>
                    </div>
                </li>
            }
        }
    </ul>

</div>


@if (OrderState.ShowingCustomeDialog)
{
    <CustomizingOrder 
        Donut="OrderState.ConfiguringDonut"
        OnCancel="OrderState.CancelCustomizededDonutDialog"
        OnConfirm="OrderState.ConfirmCustomizededDonutDialog" />
} 


@code {

    List<DonutSpecial> donutSpecial = new();
    Order order => OrderState.Order;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            donutSpecial = await HttpClient.GetFromJsonAsync<List<DonutSpecial>>(NavigationManager.BaseUri + "api/specials");
        }
        catch (HttpRequestException e)
        {
            Console.WriteLine($"Une erreur HTTP a été rencontrée : {e.Message}");
        }
        catch (NotSupportedException) // Lorsque le contenu n'est pas JSON
        {
            Console.WriteLine("Le contenu récupéré n'est pas au format JSON.");
        }
        catch (JsonException) // JSON invalide
        {
            Console.WriteLine("Le JSON récupéré n'a pas pu être désérialisé.");
        }

    }

    async Task RemoveDonutConfirmation(Donut removeDonut)
    {
        if (await JavaScript.InvokeAsync<bool>(
            "confirm",
            $"""Do you want to remove the "{removeDonut.Special!.Name}" from your order?"""))
            {
                OrderState.RemoveCustomizedDonut(removeDonut);
            }
    }

    
}
