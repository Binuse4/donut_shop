// <auto-generated />
using System;
using DonutShop.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DonutShop.Migrations
{
    [DbContext(typeof(DonutShopContext))]
    partial class DonutShopContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DonutShop.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Line1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Line2")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("DonutShop.Models.Decoration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Decorations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Oreo",
                            Price = 1.99m
                        },
                        new
                        {
                            Id = 2,
                            Name = "Milk chocolate Sauce",
                            Price = 1.99m
                        },
                        new
                        {
                            Id = 3,
                            Name = "Dark chocolate Sauce",
                            Price = 1.99m
                        },
                        new
                        {
                            Id = 4,
                            Name = "Cookie",
                            Price = 1.99m
                        },
                        new
                        {
                            Id = 5,
                            Name = "Kit Kat",
                            Price = 1.99m
                        },
                        new
                        {
                            Id = 6,
                            Name = "Kinder Bueno",
                            Price = 1.99m
                        },
                        new
                        {
                            Id = 7,
                            Name = "Kinder Country",
                            Price = 1.99m
                        },
                        new
                        {
                            Id = 8,
                            Name = "M&M's",
                            Price = 1.99m
                        },
                        new
                        {
                            Id = 9,
                            Name = "Speculoos",
                            Price = 1.99m
                        },
                        new
                        {
                            Id = 10,
                            Name = "Nutella",
                            Price = 1.99m
                        },
                        new
                        {
                            Id = 11,
                            Name = "White chocolate Sauce",
                            Price = 1.99m
                        },
                        new
                        {
                            Id = 12,
                            Name = "Milka",
                            Price = 1.99m
                        });
                });

            modelBuilder.Entity("DonutShop.Models.Donut", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SpecialId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("SpecialId");

                    b.ToTable("Donuts");
                });

            modelBuilder.Entity("DonutShop.Models.DonutDecoration", b =>
                {
                    b.Property<int>("DonutId")
                        .HasColumnType("int");

                    b.Property<int>("DecorationId")
                        .HasColumnType("int");

                    b.HasKey("DonutId", "DecorationId");

                    b.HasIndex("DecorationId");

                    b.ToTable("DonutDecoration");
                });

            modelBuilder.Entity("DonutShop.Models.DonutSpecial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FixedQuantity")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specials");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BasePrice = 11.99m,
                            Description = "Speculoos cream topping, Speculoos Flakes , Speculoos",
                            ImageUrl = "img/donuts/speculos.png",
                            Name = "Speculoos"
                        },
                        new
                        {
                            Id = 2,
                            BasePrice = 9.99m,
                            Description = "Vanilla Napage, Vanilla Oreo bits , Oreo",
                            ImageUrl = "img/donuts/oreo.png",
                            Name = "Oreo"
                        },
                        new
                        {
                            Id = 3,
                            BasePrice = 10.50m,
                            Description = "Milk chocolate topping, Crushed M&M's, Chocolate peanut M&M's",
                            ImageUrl = "img/donuts/mms.png",
                            Name = "M&M's"
                        },
                        new
                        {
                            Id = 4,
                            BasePrice = 12.75m,
                            Description = "Nutella topping, Nutella cookie",
                            ImageUrl = "img/donuts/nutella.png",
                            Name = "Nutella"
                        },
                        new
                        {
                            Id = 5,
                            BasePrice = 11.00m,
                            Description = "White chocolate topping, Caramel rice souffle, Kinder Country",
                            ImageUrl = "img/donuts/kinder_country.png",
                            Name = "Kinder Country"
                        },
                        new
                        {
                            Id = 6,
                            BasePrice = 11.50m,
                            Description = "Bueno cream topping, Chocolate coulis, Kinder Bueno",
                            ImageUrl = "img/donuts/bueno.png",
                            Name = "Kinder Bueno"
                        },
                        new
                        {
                            Id = 7,
                            BasePrice = 9.99m,
                            Description = "Milk chocolate topping, Crushed Kit Kat, Kit Kat ",
                            ImageUrl = "img/donuts/kitkat.png",
                            Name = "Kit Kat"
                        },
                        new
                        {
                            Id = 8,
                            BasePrice = 9.99m,
                            Description = "Traditional Donut , Powdered sugar ",
                            ImageUrl = "img/donuts/nature.png",
                            Name = "Natural"
                        },
                        new
                        {
                            Id = 9,
                            BasePrice = 9.99m,
                            Description = "Traditional Donut , Caramelized sugar ",
                            ImageUrl = "img/donuts/sugarGlazed.png",
                            Name = "Glazed"
                        },
                        new
                        {
                            Id = 10,
                            BasePrice = 11.00m,
                            Description = "Chocolate topping, cookie",
                            ImageUrl = "img/donuts/chocolat.png",
                            Name = "Chocolat"
                        });
                });

            modelBuilder.Entity("DonutShop.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeliveryAddressId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderId");

                    b.HasIndex("DeliveryAddressId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DonutShop.Models.Donut", b =>
                {
                    b.HasOne("DonutShop.Models.Order", null)
                        .WithMany("Donuts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DonutShop.Models.DonutSpecial", "Special")
                        .WithMany()
                        .HasForeignKey("SpecialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Special");
                });

            modelBuilder.Entity("DonutShop.Models.DonutDecoration", b =>
                {
                    b.HasOne("DonutShop.Models.Decoration", "Decoration")
                        .WithMany()
                        .HasForeignKey("DecorationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DonutShop.Models.Donut", null)
                        .WithMany("Decorations")
                        .HasForeignKey("DonutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Decoration");
                });

            modelBuilder.Entity("DonutShop.Models.Order", b =>
                {
                    b.HasOne("DonutShop.Models.Address", "DeliveryAddress")
                        .WithMany()
                        .HasForeignKey("DeliveryAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryAddress");
                });

            modelBuilder.Entity("DonutShop.Models.Donut", b =>
                {
                    b.Navigation("Decorations");
                });

            modelBuilder.Entity("DonutShop.Models.Order", b =>
                {
                    b.Navigation("Donuts");
                });
#pragma warning restore 612, 618
        }
    }
}
