// <auto-generated />
using System;
using DonutShop.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DonutShop.Migrations
{
    [DbContext(typeof(DonutShopContext))]
    [Migration("20240308080925_AddElementInSpecialsAndDecorations")]
    partial class AddElementInSpecialsAndDecorations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DonutShop.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("DonutShop.Models.Decoration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Decorations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2fb56f52-d68c-4205-935b-b0c0fbfd3608"),
                            Name = "Oreo",
                            Price = 1.99m
                        },
                        new
                        {
                            Id = new Guid("8007c9e3-0f4a-4998-bb05-a77c7e05ef14"),
                            Name = "Milk chocolate Sauce",
                            Price = 1.99m
                        },
                        new
                        {
                            Id = new Guid("953acd5b-a516-47da-9054-b1b30c6b6716"),
                            Name = "Dark chocolate Sauce",
                            Price = 1.99m
                        },
                        new
                        {
                            Id = new Guid("f369abc4-ee2a-418b-8d6e-015f7d32d875"),
                            Name = "Cookie",
                            Price = 1.99m
                        },
                        new
                        {
                            Id = new Guid("a6507d7a-7983-4791-b8ce-da7a4dca7e0a"),
                            Name = "Kit Kat",
                            Price = 1.99m
                        },
                        new
                        {
                            Id = new Guid("f11ec3e8-6b95-4cec-9434-0b265be8113f"),
                            Name = "Kinder Bueno",
                            Price = 1.99m
                        },
                        new
                        {
                            Id = new Guid("e670bbf0-0d8e-4a7d-b37f-14b2fccd9ab9"),
                            Name = "Kinder Country",
                            Price = 1.99m
                        },
                        new
                        {
                            Id = new Guid("c888bb18-13e7-4b97-8536-760c1a3851a5"),
                            Name = "M&M's",
                            Price = 1.99m
                        },
                        new
                        {
                            Id = new Guid("a1e03fa1-0ad8-4639-8d04-593de8e30f00"),
                            Name = "Speculoos",
                            Price = 1.99m
                        },
                        new
                        {
                            Id = new Guid("8f5d524a-5b11-4f52-a1ab-9d426dd7d988"),
                            Name = "Nutella",
                            Price = 1.99m
                        },
                        new
                        {
                            Id = new Guid("dfe11920-410a-4597-be5c-a75f1c0de696"),
                            Name = "White chocolate Sauce",
                            Price = 1.99m
                        },
                        new
                        {
                            Id = new Guid("67fffa43-5707-4731-82b0-5da038317510"),
                            Name = "Milka",
                            Price = 1.99m
                        });
                });

            modelBuilder.Entity("DonutShop.Models.Donut", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<Guid?>("OrderId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int>("SpecialId")
                        .HasColumnType("int");

                    b.Property<Guid>("SpecialId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderId1");

                    b.HasIndex("SpecialId1");

                    b.ToTable("Donuts");
                });

            modelBuilder.Entity("DonutShop.Models.DonutDecoration", b =>
                {
                    b.Property<int>("DonutId")
                        .HasColumnType("int");

                    b.Property<int>("DecorationId")
                        .HasColumnType("int");

                    b.Property<Guid>("DecorationId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DonutId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DonutId", "DecorationId");

                    b.HasIndex("DecorationId1");

                    b.HasIndex("DonutId1");

                    b.ToTable("DonutDecoration");
                });

            modelBuilder.Entity("DonutShop.Models.DonutSpecial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specials");

                    b.HasData(
                        new
                        {
                            Id = new Guid("12dfbb90-cf1c-4d2a-922c-7350ffca0e6f"),
                            BasePrice = 11.99m,
                            Description = "Speculoos cream topping, Speculoos Flakes , Speculoos",
                            ImageUrl = "img/donuts/",
                            Name = "Speculoos"
                        },
                        new
                        {
                            Id = new Guid("a20dc365-2946-49c8-8434-76b9fad33a0f"),
                            BasePrice = 9.99m,
                            Description = "Vanilla Napage, Vanilla Oreo bits , Oreo",
                            ImageUrl = "img/donuts/",
                            Name = "Oreo"
                        },
                        new
                        {
                            Id = new Guid("b9a22a3b-6c9b-45c2-a778-5fadf7821cf4"),
                            BasePrice = 10.50m,
                            Description = "Milk chocolate topping, Crushed M&M's, Chocolate peanut M&M's",
                            ImageUrl = "img/donuts",
                            Name = "M&M's"
                        },
                        new
                        {
                            Id = new Guid("4b25ff4a-7a9b-46a3-8c73-79dd7ad2a028"),
                            BasePrice = 12.75m,
                            Description = "Nutella topping, Nutella cookie",
                            ImageUrl = "img/donuts/",
                            Name = "Nutella"
                        },
                        new
                        {
                            Id = new Guid("2b1717c1-a66b-44d3-a15f-0399e09e9baa"),
                            BasePrice = 11.00m,
                            Description = "White chocolate topping, Caramel rice souffle, Kinder Country",
                            ImageUrl = "img/donuts/",
                            Name = "Country"
                        },
                        new
                        {
                            Id = new Guid("9dbd2105-57f1-4e47-be43-14f069ec4185"),
                            BasePrice = 11.50m,
                            Description = "Bueno cream topping, Chocolate coulis, Kinder Bueno",
                            ImageUrl = "img/donuts/",
                            Name = "Kinder Bueno"
                        },
                        new
                        {
                            Id = new Guid("0e9b19bd-9c0a-4002-b02b-16c1eb1ad37d"),
                            BasePrice = 9.99m,
                            Description = "Milk chocolate topping, Crushed Kit Kat, Kit Kat ",
                            ImageUrl = "img/donuts/",
                            Name = "Kit Kat"
                        },
                        new
                        {
                            Id = new Guid("4562c792-4402-4fe8-bcdb-d91dff493efe"),
                            BasePrice = 9.99m,
                            Description = "Traditional Donut , Powdered sugar ",
                            ImageUrl = "img/donuts/",
                            Name = "Natural"
                        },
                        new
                        {
                            Id = new Guid("63e4f9ad-451e-4b9c-b52f-8a294e83e5d5"),
                            BasePrice = 9.99m,
                            Description = "Traditional Donut , Caramelized sugar ",
                            ImageUrl = "img/donuts/",
                            Name = "Glazed"
                        },
                        new
                        {
                            Id = new Guid("a6e14ea4-f057-4919-be7e-0090d4a7f26f"),
                            BasePrice = 11.00m,
                            Description = "Chocolate topping, cookie",
                            ImageUrl = "img/donuts/",
                            Name = "Chocolat"
                        });
                });

            modelBuilder.Entity("DonutShop.Models.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DeliveryAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderId");

                    b.HasIndex("DeliveryAddressId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DonutShop.Models.Donut", b =>
                {
                    b.HasOne("DonutShop.Models.Order", null)
                        .WithMany("Donuts")
                        .HasForeignKey("OrderId1");

                    b.HasOne("DonutShop.Models.DonutSpecial", "Special")
                        .WithMany()
                        .HasForeignKey("SpecialId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Special");
                });

            modelBuilder.Entity("DonutShop.Models.DonutDecoration", b =>
                {
                    b.HasOne("DonutShop.Models.Decoration", "Decoration")
                        .WithMany()
                        .HasForeignKey("DecorationId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DonutShop.Models.Donut", null)
                        .WithMany("Decorations")
                        .HasForeignKey("DonutId1");

                    b.Navigation("Decoration");
                });

            modelBuilder.Entity("DonutShop.Models.Order", b =>
                {
                    b.HasOne("DonutShop.Models.Address", "DeliveryAddress")
                        .WithMany()
                        .HasForeignKey("DeliveryAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryAddress");
                });

            modelBuilder.Entity("DonutShop.Models.Donut", b =>
                {
                    b.Navigation("Decorations");
                });

            modelBuilder.Entity("DonutShop.Models.Order", b =>
                {
                    b.Navigation("Donuts");
                });
#pragma warning restore 612, 618
        }
    }
}
