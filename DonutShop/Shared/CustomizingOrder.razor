@using DonutShop.Models
@inject HttpClient HttpClient

<div class="dialog-container">
    <div class="dialog">
        <div class="dialog-title">
            <h2>@Donut.Special.Name</h2>
            @Donut.Special.Description
        </div>
        <form class="dialog-body">
            <div>
                @* <label>Size:</label>
                <input type="range" min="@Pizza.MinimumSize" max="@Pizza.MaximumSize" step="1" @bind="Pizza.Size" @bind:event="oninput"/>
                *@
                @if (supportNumber)
                {
                    <label>Quantity :</label>
                    <input type="range" min="@Donut.InitialtNumber" max="@Donut.MaximumNumber"
                           step="1" @bind="Donut.Quantity" @bind:event="oninput" />
                }
                <span class="size-label">
                    @(Donut.Quantity)" (€@(Donut.GetTotalPriceFormatted()))
                </span>
            </div>
        </form>

        <div class="dialog-buttons">
            <button class="btn btn-secondary mr-auto" @onclick="OnCancel">Cancel</button>
            <span class="mr-center">
                Price: <span class="price">@(Donut.GetTotalPriceFormatted())</span>
            </span>
            <button class="dialog-btn ml-auto" @onclick="OnConfirm">Order now</button>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public Donut Donut { get; set; }
    [Parameter]
    public EventCallback OnCancel { get; set; }
    [Parameter]
    public EventCallback OnConfirm { get; set; }

    bool supportNumber = true;

    protected override void OnInitialized()
    {
        if (Donut is { Special.FixedQuantity: not null })
        {
            Donut.Quantity = Donut.Special.FixedQuantity.Value;
            supportNumber = false;
        }
    }
}
